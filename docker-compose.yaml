# We use `init: true` as many processes won't respond to signals or process.exit() when PID 1.

services:
  api:
    network_mode: host
    image: wilsonzlin/hndr-api
    init: true
    build:
      context: .
      dockerfile: Dockerfile.python-base
      args:
        MAIN: api
    environment:
      DB_RPC_API_KEY: ${DB_RPC_API_KEY}
      HNDR_API_DATASETS: ${HNDR_API_DATASETS}
      PORT: 7000
      QUEUED_API_KEY: ${QUEUED_API_KEY}
      SSL_CA_BASE64: ${API_SSL_CA_BASE64}
      SSL_CERT_BASE64: ${API_SSL_CERT_BASE64}
      SSL_KEY_BASE64: ${API_SSL_KEY_BASE64}
      STATSD_HOST: telegraf
    volumes:
      - "${DOCKER_VOLUME_DIR}:/hndr-data"

  api-worker-broker:
    network_mode: host
    image: wilsonzlin/hndr-api-worker-broker
    init: true
    build:
      context: .
      dockerfile: Dockerfile.nodejs-base
      args:
        MAIN: api-worker-broker
    environment:
      API_WORKER_NODE_CERT_B64: ${API_WORKER_NODE_CERT_B64}
      API_WORKER_NODE_KEY_B64: ${API_WORKER_NODE_KEY_B64}
      API_WORKER_NODE_TOKEN: ${API_WORKER_NODE_TOKEN}
      STATSD_HOST: telegraf

  api-worker-node:
    image: wilsonzlin/hndr-api-worker-node
    init: true
    build:
      context: .
      dockerfile: Dockerfile.runpod-base
      args:
        MAIN: api-worker-node
    environment:
      API_WORKER_NODE_CERT_B64: ${API_WORKER_NODE_CERT_B64}
      API_WORKER_NODE_TOKEN: ${API_WORKER_NODE_TOKEN}
      INFLUXDB_BUCKET: ${INFLUXDB_BUCKET}
      INFLUXDB_ENDPOINT: ${INFLUXDB_ENDPOINT}
      INFLUXDB_ORGANIZATION: ${INFLUXDB_ORGANIZATION}
      INFLUXDB_TOKEN: ${INFLUXDB_TOKEN}
      LOKI_BASICAUTH_PASSWORD: ${LOKI_BASICAUTH_PASSWORD}
      LOKI_BASICAUTH_USER: ${LOKI_BASICAUTH_USER}
      LOKI_ENDPOINT: ${LOKI_ENDPOINT}

  build-ann:
    image: wilsonzlin/hndr-build-ann
    init: true
    build:
      context: .
      dockerfile: Dockerfile.python-base
      args:
        MAIN: build-ann
    volumes:
      - "${DOCKER_VOLUME_DIR}:/hndr-data"

  build-api-data:
    image: wilsonzlin/hndr-build-api-data
    init: true
    build:
      context: .
      dockerfile: Dockerfile.python-base
      args:
        MAIN: build-api-data
    volumes:
      - "${DOCKER_VOLUME_DIR}:/hndr-data"

  build-edge-data:
    image: wilsonzlin/hndr-build-edge-data
    init: true
    build:
      context: .
      dockerfile: Dockerfile.python-base
      args:
        MAIN: build-edge-data
    volumes:
      - "${DOCKER_VOLUME_DIR}:/hndr-data"

  build-data:
    image: wilsonzlin/hndr-build-data
    init: true
    build:
      context: .
      dockerfile: Dockerfile.rust-base
      args:
        MAIN: build-data
    environment:
      DB_RPC_API_KEY: ${DB_RPC_API_KEY}
    volumes:
      - "${DOCKER_VOLUME_DIR}:/hndr-data"

  build-map:
    image: wilsonzlin/hndr-build-map
    init: true
    build:
      context: .
      dockerfile: Dockerfile.python-base
      args:
        MAIN: build-map
    environment:
      MAP_POINT_SET: ${MAP_POINT_SET}
    volumes:
      - "${DOCKER_VOLUME_DIR}:/hndr-data"

  build-nn-data:
    image: wilsonzlin/hndr-build-nn-data
    init: true
    build:
      context: .
      dockerfile: Dockerfile.rust-base
      args:
        MAIN: build-nn-data
    environment:
      DB_RPC_API_KEY: ${DB_RPC_API_KEY}
    volumes:
      - "${DOCKER_VOLUME_DIR}:/hndr-data"

  crawler:
    image: wilsonzlin/hndr-crawler
    init: true
    build:
      context: .
      dockerfile: Dockerfile.rust-base
      args:
        MAIN: crawler
    environment:
      DB_RPC_API_KEY: ${DB_RPC_API_KEY}
      QUEUED_API_KEY: ${QUEUED_API_KEY}

  edge:
    network_mode: host
    image: wilsonzlin/hndr-edge
    init: true
    build:
      context: .
      dockerfile: Dockerfile.rust-base
      args:
        MAIN: edge

  edge-caddy:
    network_mode: host
    image: wilsonzlin/hndr-edge-caddy
    init: true
    build:
      context: .
      dockerfile: Dockerfile.edge-caddy
    environment:
      EDGE_CADDY_ACME_EMAIL: ${EDGE_CADDY_ACME_EMAIL}
      EDGE_DOMAIN: ${EDGE_DOMAIN}

  embedder:
    image: wilsonzlin/hndr-embedder
    init: true
    build:
      context: .
      dockerfile: Dockerfile.runpod-base
      args:
        MAIN: embedder
        HNDR_EMBEDDER_MODE: jinav2small
    environment:
      DB_RPC_API_KEY: ${DB_RPC_API_KEY}
      INFLUXDB_BUCKET: ${INFLUXDB_BUCKET}
      INFLUXDB_ENDPOINT: ${INFLUXDB_ENDPOINT}
      INFLUXDB_ORGANIZATION: ${INFLUXDB_ORGANIZATION}
      INFLUXDB_TOKEN: ${INFLUXDB_TOKEN}
      LOKI_BASICAUTH_PASSWORD: ${LOKI_BASICAUTH_PASSWORD}
      LOKI_BASICAUTH_USER: ${LOKI_BASICAUTH_USER}
      LOKI_ENDPOINT: ${LOKI_ENDPOINT}
      QUEUED_API_KEY: ${QUEUED_API_KEY}

  embedder-bgem3:
    image: wilsonzlin/hndr-embedder-bgem3
    init: true
    build:
      context: .
      dockerfile: Dockerfile.runpod-base
      args:
        MAIN: embedder
        HNDR_EMBEDDER_MODE: bgem3
    environment:
      DB_RPC_API_KEY: ${DB_RPC_API_KEY}
      INFLUXDB_BUCKET: ${INFLUXDB_BUCKET}
      INFLUXDB_ENDPOINT: ${INFLUXDB_ENDPOINT}
      INFLUXDB_ORGANIZATION: ${INFLUXDB_ORGANIZATION}
      INFLUXDB_TOKEN: ${INFLUXDB_TOKEN}
      LOKI_BASICAUTH_PASSWORD: ${LOKI_BASICAUTH_PASSWORD}
      LOKI_BASICAUTH_USER: ${LOKI_BASICAUTH_USER}
      LOKI_ENDPOINT: ${LOKI_ENDPOINT}
      QUEUED_API_KEY: ${QUEUED_API_KEY}

  enqueuer:
    image: wilsonzlin/hndr-enqueuer
    init: true
    build:
      context: .
      dockerfile: Dockerfile.nodejs-base
      args:
        MAIN: enqueuer
    environment:
      DB_RPC_API_KEY: ${DB_RPC_API_KEY}
      QUEUED_API_KEY: ${QUEUED_API_KEY}
      STATSD_HOST: telegraf

  kmeans:
    image: wilsonzlin/hndr-kmeans
    init: true
    build:
      context: .
      dockerfile: Dockerfile.python-base
      args:
        MAIN: kmeans
    volumes:
      - "${DOCKER_VOLUME_DIR}:/hndr-data"

  sentiment-analyser:
    image: wilsonzlin/hndr-sentiment-analyser
    init: true
    build:
      context: .
      dockerfile: Dockerfile.runpod-base
      args:
        MAIN: sentiment-analyser
    environment:
      DB_RPC_API_KEY: ${DB_RPC_API_KEY}
      INFLUXDB_BUCKET: ${INFLUXDB_BUCKET}
      INFLUXDB_ENDPOINT: ${INFLUXDB_ENDPOINT}
      INFLUXDB_ORGANIZATION: ${INFLUXDB_ORGANIZATION}
      INFLUXDB_TOKEN: ${INFLUXDB_TOKEN}
      LOKI_BASICAUTH_PASSWORD: ${LOKI_BASICAUTH_PASSWORD}
      LOKI_BASICAUTH_USER: ${LOKI_BASICAUTH_USER}
      LOKI_ENDPOINT: ${LOKI_ENDPOINT}
      QUEUED_API_KEY: ${QUEUED_API_KEY}

  telegraf:
    image: wilsonzlin/hndr-telegraf
    init: true
    build:
      context: .
      dockerfile: Dockerfile.telegraf
    environment:
      INFLUXDB_ENDPOINT: ${INFLUXDB_ENDPOINT}
      INFLUXDB_TOKEN: ${INFLUXDB_TOKEN}

  umap:
    image: wilsonzlin/hndr-umap
    init: true
    build:
      context: .
      dockerfile: Dockerfile.python-base
      args:
        MAIN: umap
    environment:
      UMAP_LOW_MEMORY: ${UMAP_LOW_MEMORY}
    volumes:
      - "${DOCKER_VOLUME_DIR}:/hndr-data"
