# We use `init: true` as many processes won't respond to signals or process.exit() when PID 1.

services:
  als:
    image: wilsonzlin/hndr-als
    init: true
    build:
      context: .
      dockerfile: Dockerfile.python-base
      args:
        MAIN: als
    environment:
      MAIN: als
      # OpenBLAS is configured to use 32 threads. It is highly recommended to disable its internal threadpool by setting the environment variable 'OPENBLAS_NUM_THREADS=1' or by calling 'threadpoolctl.threadpool_limits(1, "blas")'. Having OpenBLAS use a threadpool can lead to severe performance issues here.
      OPENBLAS_NUM_THREADS: "1"
    volumes:
      - "${DOCKER_VOLUME_DIR}:/hndr-data"

  build-data:
    image: wilsonzlin/hndr-build-data
    init: true
    build:
      context: .
      dockerfile: Dockerfile.rust-base
      args:
        MAIN: build-data
    environment:
      DB_RPC_API_KEY: ${DB_RPC_API_KEY}
      MAIN: build-data
    volumes:
      - "${DOCKER_VOLUME_DIR}:/hndr-data"

  build-nn-data:
    image: wilsonzlin/hndr-build-nn-data
    init: true
    build:
      context: .
      dockerfile: Dockerfile.rust-base
      args:
        MAIN: build-nn-data
    environment:
      DB_RPC_API_KEY: ${DB_RPC_API_KEY}
      MAIN: build-nn-data
    volumes:
      - "${DOCKER_VOLUME_DIR}:/hndr-data"

  crawler:
    image: wilsonzlin/hndr-crawler
    init: true
    build:
      context: .
      dockerfile: Dockerfile.rust-base
      args:
        MAIN: crawler
    environment:
      DB_RPC_API_KEY: ${DB_RPC_API_KEY}
      MAIN: crawler
      QUEUED_API_KEY: ${QUEUED_API_KEY}

  embedder:
    image: wilsonzlin/hndr-embedder
    init: true
    build:
      context: .
      dockerfile: Dockerfile.runpod-base
      args:
        MAIN: embedder
    environment:
      DB_RPC_API_KEY: ${DB_RPC_API_KEY}
      INFLUXDB_BUCKET: ${INFLUXDB_BUCKET}
      INFLUXDB_ENDPOINT: ${INFLUXDB_ENDPOINT}
      INFLUXDB_ORGANIZATION: ${INFLUXDB_ORGANIZATION}
      INFLUXDB_TOKEN: ${INFLUXDB_TOKEN}
      LOKI_BASICAUTH_PASSWORD: ${LOKI_BASICAUTH_PASSWORD}
      LOKI_BASICAUTH_USER: ${LOKI_BASICAUTH_USER}
      LOKI_ENDPOINT: ${LOKI_ENDPOINT}
      QUEUED_API_KEY: ${QUEUED_API_KEY}

  enqueuer:
    image: wilsonzlin/hndr-enqueuer
    init: true
    build:
      context: .
      dockerfile: Dockerfile.nodejs-base
      args:
        MAIN: enqueuer
    environment:
      DB_RPC_API_KEY: ${DB_RPC_API_KEY}
      MAIN: enqueuer
      QUEUED_API_KEY: ${QUEUED_API_KEY}
      STATSD_HOST: telegraf
    sysctls:
      net.ipv4.ip_local_port_range: "10000 65535"
      net.core.somaxconn: "1048576"

  kmeans:
    image: wilsonzlin/hndr-kmeans
    init: true
    build:
      context: .
      dockerfile: Dockerfile.python-base
      args:
        MAIN: kmeans
    environment:
      MAIN: kmeans
    volumes:
      - "${DOCKER_VOLUME_DIR}:/hndr-data"

  hnsw-builder:
    image: wilsonzlin/hndr-hnsw-builder
    init: true
    build:
      context: .
      dockerfile: Dockerfile.python-base
      args:
        MAIN: hnsw-builder
    environment:
      MAIN: hnsw-builder
    volumes:
      - "${DOCKER_VOLUME_DIR}:/hndr-data"

  hnsw-server:
    image: wilsonzlin/hndr-hnsw-server
    init: true
    build:
      context: .
      dockerfile: Dockerfile.hnsw-server
    volumes:
      - "${DOCKER_VOLUME_DIR}:/hndr-data"

  sentiment-analyser:
    image: wilsonzlin/hndr-sentiment-analyser
    init: true
    build:
      context: .
      dockerfile: Dockerfile.runpod-base
      args:
        MAIN: sentiment-analyser
    environment:
      DB_RPC_API_KEY: ${DB_RPC_API_KEY}
      INFLUXDB_BUCKET: ${INFLUXDB_BUCKET}
      INFLUXDB_ENDPOINT: ${INFLUXDB_ENDPOINT}
      INFLUXDB_ORGANIZATION: ${INFLUXDB_ORGANIZATION}
      INFLUXDB_TOKEN: ${INFLUXDB_TOKEN}
      LOKI_BASICAUTH_PASSWORD: ${LOKI_BASICAUTH_PASSWORD}
      LOKI_BASICAUTH_USER: ${LOKI_BASICAUTH_USER}
      LOKI_ENDPOINT: ${LOKI_ENDPOINT}
      QUEUED_API_KEY: ${QUEUED_API_KEY}

  telegraf:
    image: wilsonzlin/hndr-telegraf
    init: true
    build:
      context: .
      dockerfile: Dockerfile.telegraf
    environment:
      INFLUXDB_ENDPOINT: ${INFLUXDB_ENDPOINT}
      INFLUXDB_TOKEN: ${INFLUXDB_TOKEN}

  umap:
    image: wilsonzlin/hndr-umap
    init: true
    build:
      context: .
      dockerfile: Dockerfile.python-base
      args:
        MAIN: umap
    environment:
      MAIN: umap
    volumes:
      - "${DOCKER_VOLUME_DIR}:/hndr-data"
