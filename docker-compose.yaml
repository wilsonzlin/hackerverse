# We use `init: true` as many processes won't respond to signals or process.exit() when PID 1.

services:
  als:
    image: wilsonzlin/hndr-als
    init: true
    build:
      context: .
      dockerfile: Dockerfile.python-base
      args:
        MAIN: als
    environment:
      # > OpenBLAS is configured to use 32 threads. It is highly recommended to disable its internal threadpool by setting the environment variable 'OPENBLAS_NUM_THREADS=1' or by calling 'threadpoolctl.threadpool_limits(1, "blas")'. Having OpenBLAS use a threadpool can lead to severe performance issues here.
      OPENBLAS_NUM_THREADS: "1"
    volumes:
      - "${DOCKER_VOLUME_DIR}:/hndr-data"

  api:
    network_mode: host
    image: wilsonzlin/hndr-api
    init: true
    build:
      context: .
      dockerfile: Dockerfile.nodejs-base
      args:
        MAIN: api
    environment:
      API_SSL_CA_BASE64: ${API_SSL_CA_BASE64}
      API_SSL_CERT_BASE64: ${API_SSL_CERT_BASE64}
      API_SSL_KEY_BASE64: ${API_SSL_KEY_BASE64}
      DB_RPC_API_KEY: ${DB_RPC_API_KEY}
      PORT: 7000
      QUEUED_API_KEY: ${QUEUED_API_KEY}
      STATSD_HOST: telegraf

  build-edge-data:
    image: wilsonzlin/hndr-build-edge-data
    init: true
    build:
      context: .
      dockerfile: Dockerfile.python-base
      args:
        MAIN: build-edge-data
    volumes:
      - "${DOCKER_VOLUME_DIR}:/hndr-data"

  build-embs:
    image: wilsonzlin/hndr-build-embs
    init: true
    build:
      context: .
      dockerfile: Dockerfile.python-base
      args:
        MAIN: build-embs
    volumes:
      - "${DOCKER_VOLUME_DIR}:/hndr-data"

  build-data:
    image: wilsonzlin/hndr-build-data
    init: true
    build:
      context: .
      dockerfile: Dockerfile.rust-base
      args:
        MAIN: build-data
    environment:
      DB_RPC_API_KEY: ${DB_RPC_API_KEY}
    volumes:
      - "${DOCKER_VOLUME_DIR}:/hndr-data"

  build-map:
    image: wilsonzlin/hndr-build-map
    init: true
    build:
      context: .
      dockerfile: Dockerfile.python-base
      args:
        MAIN: build-map
    environment:
      MAP_POINT_SET: ${MAP_POINT_SET}
    volumes:
      - "${DOCKER_VOLUME_DIR}:/hndr-data"

  build-nn-data:
    image: wilsonzlin/hndr-build-nn-data
    init: true
    build:
      context: .
      dockerfile: Dockerfile.rust-base
      args:
        MAIN: build-nn-data
    environment:
      DB_RPC_API_KEY: ${DB_RPC_API_KEY}
    volumes:
      - "${DOCKER_VOLUME_DIR}:/hndr-data"

  crawler:
    image: wilsonzlin/hndr-crawler
    init: true
    build:
      context: .
      dockerfile: Dockerfile.rust-base
      args:
        MAIN: crawler
    environment:
      DB_RPC_API_KEY: ${DB_RPC_API_KEY}
      QUEUED_API_KEY: ${QUEUED_API_KEY}

  edge:
    image: wilsonzlin/hndr-edge
    init: true
    build:
      context: .
      dockerfile: Dockerfile.rust-base
      args:
        MAIN: edge
    environment:
      EDGE_SSL_CA_BASE64: ${EDGE_SSL_CA_BASE64}
      EDGE_SSL_CERT_BASE64: ${EDGE_SSL_CERT_BASE64}
      EDGE_SSL_KEY_BASE64: ${EDGE_SSL_KEY_BASE64}
      PORT: 443

  embedder:
    image: wilsonzlin/hndr-embedder
    init: true
    build:
      context: .
      dockerfile: Dockerfile.runpod-base
      args:
        MAIN: embedder
        HNDR_EMBEDDER_MODE: jinav2small
    environment:
      DB_RPC_API_KEY: ${DB_RPC_API_KEY}
      INFLUXDB_BUCKET: ${INFLUXDB_BUCKET}
      INFLUXDB_ENDPOINT: ${INFLUXDB_ENDPOINT}
      INFLUXDB_ORGANIZATION: ${INFLUXDB_ORGANIZATION}
      INFLUXDB_TOKEN: ${INFLUXDB_TOKEN}
      LOKI_BASICAUTH_PASSWORD: ${LOKI_BASICAUTH_PASSWORD}
      LOKI_BASICAUTH_USER: ${LOKI_BASICAUTH_USER}
      LOKI_ENDPOINT: ${LOKI_ENDPOINT}
      QUEUED_API_KEY: ${QUEUED_API_KEY}

  embedder-bgem3:
    image: wilsonzlin/hndr-embedder-bgem3
    init: true
    build:
      context: .
      dockerfile: Dockerfile.runpod-base
      args:
        MAIN: embedder
        HNDR_EMBEDDER_MODE: bgem3
    environment:
      DB_RPC_API_KEY: ${DB_RPC_API_KEY}
      INFLUXDB_BUCKET: ${INFLUXDB_BUCKET}
      INFLUXDB_ENDPOINT: ${INFLUXDB_ENDPOINT}
      INFLUXDB_ORGANIZATION: ${INFLUXDB_ORGANIZATION}
      INFLUXDB_TOKEN: ${INFLUXDB_TOKEN}
      LOKI_BASICAUTH_PASSWORD: ${LOKI_BASICAUTH_PASSWORD}
      LOKI_BASICAUTH_USER: ${LOKI_BASICAUTH_USER}
      LOKI_ENDPOINT: ${LOKI_ENDPOINT}
      QUEUED_API_KEY: ${QUEUED_API_KEY}

  enqueuer:
    image: wilsonzlin/hndr-enqueuer
    init: true
    build:
      context: .
      dockerfile: Dockerfile.nodejs-base
      args:
        MAIN: enqueuer
    environment:
      DB_RPC_API_KEY: ${DB_RPC_API_KEY}
      QUEUED_API_KEY: ${QUEUED_API_KEY}
      STATSD_HOST: telegraf

  kmeans:
    image: wilsonzlin/hndr-kmeans
    init: true
    build:
      context: .
      dockerfile: Dockerfile.python-base
      args:
        MAIN: kmeans
    volumes:
      - "${DOCKER_VOLUME_DIR}:/hndr-data"

  hnsw-builder:
    image: wilsonzlin/hndr-hnsw-builder
    init: true
    build:
      context: .
      dockerfile: Dockerfile.python-base
      args:
        MAIN: hnsw-builder
    volumes:
      - "${DOCKER_VOLUME_DIR}:/hndr-data"

  hnsw-post-bgem3-builder:
    image: wilsonzlin/hndr-hnsw-post-bgem3-builder
    init: true
    build:
      context: .
      dockerfile: Dockerfile.python-base
      args:
        MAIN: hnsw-post-bgem3-builder
    volumes:
      - "${DOCKER_VOLUME_DIR}:/hndr-data"

  hnsw-server:
    network_mode: host
    image: wilsonzlin/hndr-hnsw-server
    init: true
    build:
      context: .
      dockerfile: Dockerfile.uvicorn-base
      args:
        MAIN: hnsw-server
    environment:
      PORT: 7001
    volumes:
      - "${DOCKER_VOLUME_DIR}:/hndr-data"

  pca:
    image: wilsonzlin/hndr-pca
    init: true
    build:
      context: .
      dockerfile: Dockerfile.python-base
      args:
        MAIN: pca
    volumes:
      - "${DOCKER_VOLUME_DIR}:/hndr-data"

  semantic-analysis-server:
    network_mode: host
    image: wilsonzlin/hndr-semantic-analysis-server
    init: true
    build:
      context: .
      dockerfile: Dockerfile.uvicorn-base
      args:
        MAIN: semantic-analysis-server
    environment:
      PORT: 7002
    volumes:
      - "${DOCKER_VOLUME_DIR}:/hndr-data"

  sentiment-analyser:
    image: wilsonzlin/hndr-sentiment-analyser
    init: true
    build:
      context: .
      dockerfile: Dockerfile.runpod-base
      args:
        MAIN: sentiment-analyser
    environment:
      DB_RPC_API_KEY: ${DB_RPC_API_KEY}
      INFLUXDB_BUCKET: ${INFLUXDB_BUCKET}
      INFLUXDB_ENDPOINT: ${INFLUXDB_ENDPOINT}
      INFLUXDB_ORGANIZATION: ${INFLUXDB_ORGANIZATION}
      INFLUXDB_TOKEN: ${INFLUXDB_TOKEN}
      LOKI_BASICAUTH_PASSWORD: ${LOKI_BASICAUTH_PASSWORD}
      LOKI_BASICAUTH_USER: ${LOKI_BASICAUTH_USER}
      LOKI_ENDPOINT: ${LOKI_ENDPOINT}
      QUEUED_API_KEY: ${QUEUED_API_KEY}

  telegraf:
    image: wilsonzlin/hndr-telegraf
    init: true
    build:
      context: .
      dockerfile: Dockerfile.telegraf
    environment:
      INFLUXDB_ENDPOINT: ${INFLUXDB_ENDPOINT}
      INFLUXDB_TOKEN: ${INFLUXDB_TOKEN}

  umap:
    image: wilsonzlin/hndr-umap
    init: true
    build:
      context: .
      dockerfile: Dockerfile.python-base
      args:
        MAIN: umap
    environment:
      UMAP_LOW_MEMORY: ${UMAP_LOW_MEMORY}
      UMAP_MIN_DIST: ${UMAP_MIN_DIST}
      UMAP_N_NEIGHBORS: ${UMAP_N_NEIGHBORS}
    volumes:
      - "${DOCKER_VOLUME_DIR}:/hndr-data"

  umap-prepare:
    image: wilsonzlin/hndr-umap-prepare
    init: true
    build:
      context: .
      dockerfile: Dockerfile.python-base
      args:
        MAIN: umap-prepare
    volumes:
      - "${DOCKER_VOLUME_DIR}:/hndr-data"
